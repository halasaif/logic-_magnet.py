from pydoc import text
from tkinter import font
import pygame  # type: ignore  
import sys  

pygame.init()  
width = 800  
height = 800  

RED = [255, 0, 0]  
BLUE = [0, 0, 255]  
GREEN = [0, 255, 0]
GREEN1 = [0, 150, 0]  
BLACK = [0, 0, 0]  
speed = 1  
circles = [  
    [310, 310, 'red'],   
    [155, 310, 'blue'],   
    [155, 460, 'green'],  
    [600, 155, 'green']  
]  

button_positions = [  
    (100, 100),(250, 100),(400, 100),(550, 100),  
    (100, 250),(250, 250),(400, 250),(550, 250), 
    (100, 400),(250, 400),(400, 400),(550, 400),
    (100, 550),(250, 550),(400, 550),(550, 550)
]  

circles1 = [  
    [155, 610, 'red'],  #610,450 
    [610, 450, 'blue'],   
    [300, 155, 'green'],  
    [600, 155, 'green']  
           ]  
    # for magnet in circles1:  
    #     color = RED if magnet[2] == 'red' else BLUE if magnet[2] == 'blue' else GREEN  
    #     pygame.draw.circle(screen, color, (magnet[0], magnet[1]), 35)

# class ResetButton:
#     def init(self, text, pos):
#         self.font = pygame.font.Font(None, 36)
#         self.text = text
#         self.pos = pos
#         self.rect = None

#     def draw(self, screen):
#         text_surface = self.font.render(self.text, True, BLUE)
#         self.rect = text_surface.get_rect(center=self.pos)
#         screen.blit(text_surface, self.rect)

#     def is_clicked(self, mouse_pos):
#         return self.rect.collidepoint(mouse_pos)
class GameState:
    def init(self, state):
        self.state = state
        self.children = []

    def add_child(self, child_state):
        self.children.append(child_state)

def dfs(state, visited):
    if state.state in visited:
        return
    visited.add(state.state)
    print(f"Visiting state: {state.state}")

    for child in state.children:
        dfs(child, visited)


initial_state = GameState("Start")
state_1 = GameState("1")
state_2 = GameState("2")
state_3 = GameState("3")
state_4 = GameState("4")
state_5 = GameState("5")
state_6 = GameState("6")
state_7 = GameState("7")
state_8 = GameState("8")
state_9 = GameState("9")
state_10 = GameState("10")
state_11 = GameState("11")
state_12 = GameState("12")
state_13= GameState("13")
state_14 = GameState("14")
state_15 = GameState("15")
state_16 = GameState("16")





initial_state.add_child(state_1)
initial_state.add_child(state_2)
state_1.add_child(state_3)
state_2.add_child(state_4)
state_6.add_child(state_8)
state_10.add_child(state_12)
state_14.add_child(state_16)




visited_states = set()
dfs(initial_state, visited_states)


class Node:
    def init(self, value):
        self.value = value
        self.children = []

def bfs(root, target):
    if not root:
        return None

    queue = [root]  

    while queue:
        button_positions = queue.pop(0) 

        
        if button_positions.value == target:
            return button_positions

       
        for child in button_positions.children:
            queue.append(child)

    return None  


if name == "main":
    
    root = Node(1)
    child1 = Node(2)
    child2 = Node(3)
    child3 = Node(4)
    child4 = Node(5)
    child5 = Node(6)
    child6 = Node(7)
    child7 = Node(8)
    child8 = Node(9)
    child9 = Node(10)
    child10 = Node(11)
    child11 = Node(12)
    child12 = Node(13)
    child13 = Node(14)
    child14 = Node(15)
    child15 = Node(16)



    root.children.append(child1)
    root.children.append(child2)
    child1.children.append(child3)
    child1.children.append(child4)
    child1.children.append(child5)
    child1.children.append(child6)
    child1.children.append(child7)
    child1.children.append(child8)
    child1.children.append(child9)
    child1.children.append(child10)
    child1.children.append(child11)
    child1.children.append(child12)
    child1.children.append(child13)
    child1.children.append(child14)
    child1.children.append(child15)
    

    

    
    target_value = 4
    result_node = bfs(root, target_value)

    if result_node:
        print(f"تم العثور على العنصر: {result_node.value}")
    else:
        print("العنصر غير ملوجود")
def res():
    game_butt()
    create_circle()

def game_butt():  
    for pos in button_positions:  
        pygame.draw.rect(screen, BLACK, (pos[0], pos[1], 120, 120))  # Draw button rectangles  
    pygame.draw.rect(screen, GREEN1, (button_positions[3][0], button_positions[12][1], 120, 120)) 
    pygame.draw.rect(screen, GREEN1, (button_positions[2][1], button_positions[12][1], 120, 120))  # Draw button rectangles  
     # Draw button rectangles  
        
def create_circle():  
    for magnet in circles:  
        color = RED if magnet[2] == 'red' else BLUE if magnet[2] == 'blue' else GREEN  
        pygame.draw.circle(screen, color, (magnet[0], magnet[1]), 35) 
 
screen = pygame.display.set_mode((width, height))  
pygame.display.set_caption("Logic Magnets")  

def move_circles(index, cx, cy):  
    x, y, colores = circles[index]  
    nx=(cx+x)*speed
    ny=(cy+y)*speed
    if nx>width-180:
        nx=width-180
    if ny>height-180:
        ny=height-180
    circles[index] = (nx,ny, colores)  

def move_circlesred():  
    if circles[0][0] == circles[2][0]:  
        move_circles(2, 0, 0.1)  

def move_circlesblue():  
    if circles[0][0] == circles[3][0]:  
        move_circles(3, 0.1, 0)  
font = pygame.font.Font(None,36)        
button_rect=pygame.Rect(300,700,150,50)
button_color=BLUE
button_text = font.render("restert", True, (255,255,255))


# def draw_button(text, x, y, width, height):
#     pygame.draw.rect(screen, BLUE, (x, y, width, height))
#     text_surface = font.render(text, True, BLACK)
#     text_rect = text_surface.get_rect(center=(300 // 2, 700 // 2))
#     screen.blit(text_surface, text_rect)

# Main game loop  


while True:  
    for event in pygame.event.get():  
        if event.type == pygame.QUIT:  
            pygame.quit()  
            sys.exit()  
            

        if event.type == pygame.MOUSEBUTTONDOWN:
            
            if button_rect.collidepoint(event.pos):
               # hhh()
            #   circle=[ [610, 450, 'red'],   
            #            [155, 610, 'blue']] 
            #   print(circle)
               # move_circles(0,0,0.1)
            #   for magnet in circle:  
            #     color = RED if magnet[2] == 'red' else BLUE if magnet[2] == 'blue' else GREEN  
            #     pygame.draw.circle(screen, color, (magnet[0], magnet[1]), 35) 
                # circles[0]==circles1[0]
                button_color=RED if button_color==GREEN else GREEN
                res()
                
        #         circles.copy()
    

   
    # keys = pygame.key.get_pressed()  

    # if keys[pygame.K_RIGHT]:  
    #     move_circles(1, 0.1, 0)  
        
    # if keys[pygame.K_DOWN]:  
    #     move_circles(1, 0, 0.1)  

    # if keys[pygame.K_UP]:  
    #     move_circles(0, 0, -0.1)  
    #     move_circlesred()
    #     move_circles(1,0,-0,3)
    #     move_circles(3, 0.1, 0) 

    # if keys[pygame.K_LEFT]:  
    #     move_circles(1, -0.1, 0)  
    #     move_circlesred()  
    #     move_circles(0,-0.1,0)
    screen.fill((140, 140, 140)) 
    #draw_button("اضغط هنا", 150, 100, 100, 50)
    pygame.draw.rect(screen,button_color,button_rect) 
    game_butt()  # Draw the grid buttons  
    create_circle() 
    text_rect = button_text.get_rect(center=button_rect.center)
    screen.blit(button_text,text_rect)
    move_circles(0, 0.1, 0)  
    #move_circlesred()=
    move_circles(0,0,0.1)
    move_circles(3,0,0.1)
    move_circles(1,0,0.1)
    move_circles(2,0,0.1)

     # Draw the circles on the screen  
    pygame.display.flip()
